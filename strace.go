package main

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"os/signal"
	"syscall"
	"time"
)

type Strace struct {
	DefaultArgs []string
	UserArgs    []string
	Timeout     int64
}

/*func (s Strace) Run() {
	args := append(s.DefaultArgs, s.UserArgs...)

	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.Timeout)*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, "strace", args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		fmt.Printf("[!] Strace timeout reached: %s\n", err)
	}
}*/

//  The function generated by DeepSeek, add the signal handle
func (s Strace) Run() {
	args := append(s.DefaultArgs, s.UserArgs...)
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(s.Timeout)*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, "strace", args...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT)
	defer signal.Stop(sigCh)

	if err := cmd.Start(); err != nil {
		fmt.Printf("[-] Strace start fail: %s\n", err)
		return
	}

	done := make(chan error, 1)
	go func() { done <- cmd.Wait() }()

	select {
	case <-ctx.Done():
		fmt.Printf("[!] timeout reached: %s\n", ctx.Err())
		_ = cmd.Process.Kill()
	case sig := <-sigCh:
		fmt.Printf("\n[!] receive the signal %s\n", sig)
		_ = cmd.Process.Kill()
		<-done
	case err := <-done:
		if err != nil {
			fmt.Printf("[!] Process exit: %s\n", err)
		}
	}
}
